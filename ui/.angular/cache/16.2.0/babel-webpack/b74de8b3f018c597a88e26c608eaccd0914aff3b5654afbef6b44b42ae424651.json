{"ast":null,"code":"var _class;\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nexport class FilterServiceService {\n  filterBuildings(buildingList) {\n    let filteredBuildingsList = buildingList.map(building => building.nf_buildingid);\n    this.filteredBuildings$.next(this.buildings.filter(building => filteredBuildingsList.includes(building.nf_buildingid)));\n  }\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.buildings = [];\n    this.filteredBuildings$ = new Subject();\n    this.dataService.getAllBuildings().subscribe(buildings => {\n      this.buildings = buildings;\n    });\n  }\n}\n_class = FilterServiceService;\n_class.ɵfac = function FilterServiceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.DataService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","FilterServiceService","filterBuildings","buildingList","filteredBuildingsList","map","building","nf_buildingid","filteredBuildings$","next","buildings","filter","includes","constructor","dataService","getAllBuildings","subscribe","i0","ɵɵinject","i1","DataService","factory","ɵfac","providedIn"],"sources":["F:\\Программирование\\Обучение\\Angular\\Nikfort-Test-App\\src\\app\\services\\filter-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Building } from '../models/building';\nimport { nf_building } from '../data/buildings';\nimport { Subject } from 'rxjs';\nimport { DataService } from './data.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterServiceService {\n\n  buildings: Building[] = [];\n\n  public filteredBuildings$ = new Subject<Building[]>();\n\n  filterBuildings(buildingList: Building[]) {\n    let filteredBuildingsList = buildingList.map(building => building.nf_buildingid);\n    this.filteredBuildings$.next(this.buildings.filter(building => filteredBuildingsList.includes(building.nf_buildingid)));\n  }\n\n  constructor(private dataService: DataService) {\n    this.dataService.getAllBuildings().subscribe(buildings => {\n      this.buildings = buildings\n    })\n   }\n}\n"],"mappings":";AAGA,SAASA,OAAO,QAAQ,MAAM;;;AAM9B,OAAM,MAAOC,oBAAoB;EAM/BC,eAAeA,CAACC,YAAwB;IACtC,IAAIC,qBAAqB,GAAGD,YAAY,CAACE,GAAG,CAACC,QAAQ,IAAIA,QAAQ,CAACC,aAAa,CAAC;IAChF,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAACC,SAAS,CAACC,MAAM,CAACL,QAAQ,IAAIF,qBAAqB,CAACQ,QAAQ,CAACN,QAAQ,CAACC,aAAa,CAAC,CAAC,CAAC;EACzH;EAEAM,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAT/B,KAAAJ,SAAS,GAAe,EAAE;IAEnB,KAAAF,kBAAkB,GAAG,IAAIR,OAAO,EAAc;IAQnD,IAAI,CAACc,WAAW,CAACC,eAAe,EAAE,CAACC,SAAS,CAACN,SAAS,IAAG;MACvD,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC,CAAC;EACH;;SAfUT,oBAAoB;;mBAApBA,MAAoB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;;SAApBnB,MAAoB;EAAAoB,OAAA,EAApBpB,MAAoB,CAAAqB,IAAA;EAAAC,UAAA,EAFnB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}