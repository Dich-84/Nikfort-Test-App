{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n    this.getAllBuildings().subscribe(buildings => {\n      this.buildings = buildings;\n    });\n    this.getAllSections().subscribe(sections => {\n      this.sections = sections;\n    });\n    this.getAllFloors().subscribe(floors => {\n      this.floors = floors;\n    });\n    this.getAllRealtyobjects().subscribe(realtyobjects => {\n      this.realtyobjects = realtyobjects;\n    });\n  }\n  getAllProjects() {\n    return this.http.get('http://localhost:64382/api/projects');\n  }\n  getAllBuildings() {\n    return this.http.get('http://localhost:64382/api/buildings');\n  }\n  getAllSections() {\n    return this.http.get('http://localhost:64382/api/sections');\n  }\n  getAllFloors() {\n    return this.http.get('http://localhost:64382/api/floors');\n  }\n  getAllRealtyobjects() {\n    return this.http.get('http://localhost:64382/api/realtyobjects');\n  }\n}\n_class = DataService;\n_class.ɵfac = function DataService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["DataService","constructor","http","getAllProjects","subscribe","projects","getAllBuildings","buildings","getAllSections","sections","getAllFloors","floors","getAllRealtyobjects","realtyobjects","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["F:\\Программирование\\Обучение\\Angular\\Nikfort-Test-App\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Project } from '../models/project';\nimport { Floor } from '../models/floor';\nimport { Building } from '../models/building';\nimport { Section } from '../models/section';\nimport { Realtyobject } from '../models/realtyobject';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  projects: Project[];\n  buildings: Building[];\n  sections: Section[];\n  floors: Floor[];\n  realtyobjects: Realtyobject[];\n\n  constructor(private http: HttpClient) {\n    this.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n    })\n\n    this.getAllBuildings().subscribe(buildings => {\n      this.buildings = buildings;\n    })\n\n    this.getAllSections().subscribe(sections => {\n      this.sections = sections;\n    })\n\n    this.getAllFloors().subscribe(floors => {\n      this.floors = floors;\n    })\n\n    this.getAllRealtyobjects().subscribe(realtyobjects => {\n      this.realtyobjects = realtyobjects;\n    })\n  }\n\n  getAllProjects(): Observable<Project[]> {\n    return this.http.get<Project[]>('http://localhost:64382/api/projects');\n  }\n\n  getAllBuildings(): Observable<Building[]> {\n    return this.http.get<Building[]>('http://localhost:64382/api/buildings');\n  }\n\n  getAllSections(): Observable<Section[]> {\n    return this.http.get<Section[]>('http://localhost:64382/api/sections');\n  }\n\n  getAllFloors(): Observable<Floor[]> {\n    return this.http.get<Floor[]>('http://localhost:64382/api/floors');\n  }\n\n  getAllRealtyobjects(): Observable<Realtyobject[]> {\n    return this.http.get<Realtyobject[]>('http://localhost:64382/api/realtyobjects');\n  }\n}\n"],"mappings":";;;AAYA,OAAM,MAAOA,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,cAAc,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAG;MACzC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACC,eAAe,EAAE,CAACF,SAAS,CAACG,SAAS,IAAG;MAC3C,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACC,cAAc,EAAE,CAACJ,SAAS,CAACK,QAAQ,IAAG;MACzC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACC,YAAY,EAAE,CAACN,SAAS,CAACO,MAAM,IAAG;MACrC,IAAI,CAACA,MAAM,GAAGA,MAAM;IACtB,CAAC,CAAC;IAEF,IAAI,CAACC,mBAAmB,EAAE,CAACR,SAAS,CAACS,aAAa,IAAG;MACnD,IAAI,CAACA,aAAa,GAAGA,aAAa;IACpC,CAAC,CAAC;EACJ;EAEAV,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACD,IAAI,CAACY,GAAG,CAAY,qCAAqC,CAAC;EACxE;EAEAR,eAAeA,CAAA;IACb,OAAO,IAAI,CAACJ,IAAI,CAACY,GAAG,CAAa,sCAAsC,CAAC;EAC1E;EAEAN,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACN,IAAI,CAACY,GAAG,CAAY,qCAAqC,CAAC;EACxE;EAEAJ,YAAYA,CAAA;IACV,OAAO,IAAI,CAACR,IAAI,CAACY,GAAG,CAAU,mCAAmC,CAAC;EACpE;EAEAF,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACV,IAAI,CAACY,GAAG,CAAiB,0CAA0C,CAAC;EAClF;;SAhDWd,WAAW;;mBAAXA,MAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXlB,MAAW;EAAAmB,OAAA,EAAXnB,MAAW,CAAAoB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}